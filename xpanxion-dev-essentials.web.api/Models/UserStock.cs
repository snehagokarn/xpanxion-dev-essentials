/*
 * Stock Share
 *
 * stock share apis are a way to get people up the leader board in terms of points/stocks given to them by colleagues
 *
 * OpenAPI spec version: 1.0.0
 * Contact: snehag@xpanxion.co.in
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UserStock : IEquatable<UserStock>
    { 
        /// <summary>
        /// Gets or Sets GetterUserId
        /// </summary>
        [DataMember(Name="getterUserId")]
        public long? GetterUserId { get; set; }

        /// <summary>
        /// Gets or Sets GiverUserId
        /// </summary>
        [DataMember(Name="giverUserId")]
        public long? GiverUserId { get; set; }

        /// <summary>
        /// Gets or Sets Stock
        /// </summary>
        [DataMember(Name="stock")]
        public int? Stock { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// congratulatory message the user gives to another
        /// </summary>
        /// <value>congratulatory message the user gives to another</value>
        [DataMember(Name="message")]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserStock {\n");
            sb.Append("  GetterUserId: ").Append(GetterUserId).Append("\n");
            sb.Append("  GiverUserId: ").Append(GiverUserId).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserStock)obj);
        }

        /// <summary>
        /// Returns true if UserStock instances are equal
        /// </summary>
        /// <param name="other">Instance of UserStock to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserStock other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    GetterUserId == other.GetterUserId ||
                    GetterUserId != null &&
                    GetterUserId.Equals(other.GetterUserId)
                ) && 
                (
                    GiverUserId == other.GiverUserId ||
                    GiverUserId != null &&
                    GiverUserId.Equals(other.GiverUserId)
                ) && 
                (
                    Stock == other.Stock ||
                    Stock != null &&
                    Stock.Equals(other.Stock)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (GetterUserId != null)
                    hashCode = hashCode * 59 + GetterUserId.GetHashCode();
                    if (GiverUserId != null)
                    hashCode = hashCode * 59 + GiverUserId.GetHashCode();
                    if (Stock != null)
                    hashCode = hashCode * 59 + Stock.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserStock left, UserStock right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserStock left, UserStock right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
