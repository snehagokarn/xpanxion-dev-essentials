/*
 * Stock Share
 *
 * stock share apis are a way to get people up the leader board in terms of points/stocks given to them by colleagues
 *
 * OpenAPI spec version: 1.0.0
 * Contact: snehag@xpanxion.co.in
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class StockApiController : Controller
    { 
        /// <summary>
        /// Returns the top 5 users total points, latest picture and latest comments given to them.
        /// </summary>
        
        /// <response code="200">successful operation</response>
        [HttpGet]
        [Route("/v1/user/stocks/leaders")]
        [ValidateModelState]
        [SwaggerOperation("GetLeaderStocks")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserStock), description: "successful operation")]
        public virtual IActionResult GetLeaderStocks()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserStock));

            string exampleJson = null;
            exampleJson = "{\n  \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"getterUserId\" : 0,\n  \"giverUserId\" : 6,\n  \"stock\" : 1,\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserStock>(exampleJson)
            : default(UserStock);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns user stocks given and recieved
        /// </summary>
        /// <remarks>Returns user stocks given and recieved</remarks>
        /// <param name="userId">ID of user to return</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">User not found</response>
        [HttpGet]
        [Route("/v1/user/stocks/{userId}")]
        [ValidateModelState]
        [SwaggerOperation("GetStocksUserById")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "successful operation")]
        public virtual IActionResult GetStocksUserById([FromRoute][Required]long? userId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            string exampleJson = null;
            exampleJson = "{\n  \"firstName\" : \"firstName\",\n  \"lastName\" : \"lastName\",\n  \"emailVerified\" : true,\n  \"password\" : \"password\",\n  \"deleted\" : true,\n  \"phone\" : \"phone\",\n  \"id\" : 0,\n  \"email\" : \"email\",\n  \"username\" : \"username\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<User>(exampleJson)
            : default(User);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Give stocks to a person
        /// </summary>
        
        /// <param name="body">user stock you want to give your</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid Order</response>
        [HttpPost]
        [Route("/v1/user/stocks")]
        [ValidateModelState]
        [SwaggerOperation("InsertUserStocks")]
        public virtual IActionResult InsertUserStocks([FromBody]UserStock body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);


            throw new NotImplementedException();
        }

        /// <summary>
        /// uploads an image of the user you want to give stocks to
        /// </summary>
        
        /// <param name="userId">ID of user to update</param>
        /// <param name="additionalMetadata">Additional data to pass to server</param>
        /// <param name="file">file to upload</param>
        /// <response code="200">successful operation</response>
        [HttpPost]
        [Route("/v1/user/stocks/{userId}/uploadImage")]
        [ValidateModelState]
        [SwaggerOperation("UploadFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(ApiResponse), description: "successful operation")]
        public virtual IActionResult UploadFile([FromRoute][Required]long? userId, [FromForm]string additionalMetadata, [FromForm]System.IO.Stream file)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"code\" : 0,\n  \"type\" : \"type\",\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiResponse>(exampleJson)
            : default(ApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
